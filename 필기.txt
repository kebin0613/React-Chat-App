<기본구조>

`.리액트 앱 설치
-npx create-react-app ./
  -->안되서 이름 직접입력해서 설치완료
-npm run start 
  --->port3000에서 확인!

2.Create React App구조(Structure)
-https://create-react-app.dev/docs/folder-structure/  참고
-참고한구조 -> 보일러플레이트에 특성화된 구조로 또 변경
 assets/ ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ> 이미지, css, js 파일들 보관
 commons/ components ㅡㅡㅡㅡㅡㅡㅡ> 여러 페이지에서 쓰일 수 있는것들
               typs ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ> typescript를 위해서 type 지정(안쓰지만 생성)
 components ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ> Page들을 넣음
 redux/ actions ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ> Redux 를 위한 폴더들
          reducer ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ> / /
 App.jsㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ> Routing 관련 일을 처리
-위처럼 폴더들 생성해줌

3.React Router Dom
1)App.js 에서 페이지를 이동할 수 있게 라우팅처리
 -->리액트에서는 페이지이동을 시킬때 React Router Dom이라는 모듈을 이용
2)react-router-dom에서 제공하는 import 작성 후 App.js에 작성
3)LoginPage에 LoginPage.js, RegisterPage에 RegisterPage.js 파일생성 후 
  rfce로 function component 작성- (ES7 dev tool 다운하면 작성가능)
4)Components에 ChatPage 폴더 생성후 해당 폴더안에 ChatPage.js 파일 생성하고
 위와같이 rfce로 function componet 작성
5)새로만든 컴포넌트들 App.js 에 import 작성하여 가져오고,  Route 작성
6)npm install react-router-dom --save 로 설치
7)잘 작동하는지 확인
 
4.리덕스 기본구조
1)npm install redux react-redux redux-promis redux-thunk  로 dependency들 다운
2)리덕스를 연결 -> index.js 에 아래와 같이 작성
 import { Provider } from 'react-redux';  작성후
 <Provider>
     <App/>
 </Provider>	처럼 App을 감싸준다
3)<Provider store ={}> 해주는데 리덕스는 객체만 받을 수 있는데 함수,프로미스를
  받기위해서  미들웨어랑 같이 넣어준다 (아래와같음) 
4)import { createStore, applyMiddleware } from 'redux';
 import promiseMiddleware from 'redux-promise';
 import ReduxThunk from 'redux-thunk';    이렇게 3가지 import 해준뒤에
 const createStoreWithMiddleware = applyMiddleware(promiseMiddleware, ReduxThunk)(createStore)
 작성후 <Provider store ={ reateStoreWithMiddleware} > 스토어안에 넣어줌
5)<Provider store ={ reateStoreWithMiddleware() } > 안에 reducer 넣어주기위해 
  reducer폴더에 index.js 파일을 생성후 아래와 같이 작성
  import { combineReducers } from 'redux';
  //import user from './user_reducer';
  //import chatRoom from './chatRoom_reducer';

  const rootReducer = combineReducers({
      //user,
      //chatRoom
  })

  export default rootReducer;    
6)작성후 index.js 로 돌아와 import Reducer from './redux/reducers';  작성
7)그리고나서 reducer을 넣어줌 <Provider store ={ reateStoreWithMiddleware(reducer) } >
8)reducer crome extenction도 사용할 수 있게 하기 위해 아래와 같이 추가함
 <Provider store={ createStoreWithMiddleware(
    Reducer,
    window.__REDUX_DEVTOOLS_EXTENSION__ &&
    window.__REDUX_DEVTOOLS_EXTENSION__()) 
    }>

 
5.애플리케이션 전체적인 구조
-단순한 CRUD 앱이 아닌 채팅 애플이기 떄문에 실시간(real time)!!!!
 -->보통 실시간이 강조되는것은nodejs, database, socket io모듈을 통해서 많이 만듬
 -->하지만 Firebase를 이용하여 하나로 해버림!!!!
-Normar Real Time Chat App과 Real Time Chat App (Firevase)의 차이
  -->먼저 REST vs Websockets
  -->다음으로 FIrebase에 대해서 좀 더 알아보자

6.REST vs WebSockets
-ex)A 와 B가 채팅을 나누는데 해당 채팅을 확인하려면
 REST 를 사용시-->  리프레쉬를 해줘야 한다
 Websockets 을 사용시--> 즉시 가능
-ex)택시 앱에서 손님이 택시기사의 위치를 알고 싶을떄 
 Rest는 -------->그떄그때 서버에 요청을 해서 확인 (한방향 통신)
 Websockets 은------>계속 요청을 하지 않아도 택시기사가 
                             위치를 전달하면 바로 알 수 있음  (양방향 통신)
==> Firebase가 Websockets 방식!!!!!!

7.Firebase
-어플리케이션을 만들떄 필요한 부분들을 자동으로 만들어주는 플랫폼 (구글에서 만듬)
-앱을 만들떄 필요한 부분들을 Firebase 플랫폼을 사용함으로써 쉽게 할 수 있음
 -->인증, 데이터베이스, 스토리지, 푸시알림, 배포 등등
-데이터베이스는 관계형 데이터베이스(Mysql이나 오라클)가 아닌 
 NoSQL 기반인 (MongoDB)DOcumnet 형식의 빠르고 간편한 DB사용
****RTSP(Real Time Stream Protocol)방식을 지원
     -->실시간으로 데이터를 전송해주는 방식(리프레쉬 필요x)

8.Firebase 사용
1)홈페이지 접속 -> getstarted -> add project -> 프로젝트명(react-firebase-chat-app)
 -> continue -> 애널리스틱을 사용할 어카운트를 선택 -> create
2)프로젝트가 만들어진후 첫 페이지에서 <>(web)을 선택 -> 앱 닉네임(react-firebase-app)
 ->firebase SDK 소스가 나오고 그걸 사용하는게 일반적이지만, react 에선
   npm으로 설치할 수 있기때문에 복사하지 않는다.
3)npm install firebase --save 로 다운(아까의 그 코드를 npm으로 대체)
4)src에 firebase.js 파일을 생성후 SDK소스중 가장 아래의 script부분만 복사하여 삽입후
  import firebase from "firebase/app"; 를 상단에 작성
5)파이어베이스는 인증, 데이터베이스, 스토리지 등 여러가지를 하기에 
  할 수 있도록 import "firebase/auth"; 
	      import "firebase/database"; 
                  import "firebase/storage";    가져온다.
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
<인증처리>

1.React Bootstrap 
-CSS Framwork - Reeact Bootstrap (가장 많이 사용하는 부트스트랩)
 -->사용하는이유는 기능을 만드는데 더 집중하기위해서
-CSS Framwork의 종류
  -->Mater UI, Semantic UI, Ant Design, Materiallze 등
1)https://react-bootstrap.github.io/  사이트 참고하여
  npm install bootstrap react-bootstrap --save 로 다운
2)stylesheet도 필요하기때문에 index.js에
  import 'bootstrap/dist/css/bootstrap.min.css';  삽입.
3)로고디자인도 필요하기 떄문에 
 https://react-icons.github.io/react-icons/#/ 사이트 참고하여
 npm install react-icons --save  로 다운

2.회원가입 페이지 UI 만들기
-이메일, 이름, 비밀번호, 비밀번호 확인, 전송버튼 제작 
1)UI 웹사이트로이동  https://react-hook-form.com/kr/get-started/
 React Hook Form 으로 간단하게 유효성 검사를 하기 위해 사용하는것이고
 codesandbox의 UI부분을 그대로 사용할것이므로 복사하여
 Components의 RegisterPage의 Register.js에 붙여넣는다 (이벤트부분은 지워줌)
2)css를 입혀주는데 마찬가지로 codesandbox의 style.css를 복사하여
  index.css에 붙여넣는다.
3)붙여놓은 <div>에 classname을 auth-wrapper로 짓고
 index.css에 붙여넣은 부분을 전부 .auth-wrapper 를 앞에 붙여주어 
 다른 같은 태그에는 적용이 안되도록 한다
4)UI를 가운데에 오게 하기 위해 index.css의 .APP을 지우고
 맨위의 .auth-wrapper을 만들고 css를 작성
5)auth-wrapper form 에 max-width를 그냥 width로 바꾸고 375px로 설정
6)Register.js의 제목을 만들어준다.
7)버튼의 색상과, 호버했을떄의 버튼 색상을 변경해준다
8)Register.js에서 계획했던 이메일, 이름, 비밀번호, 비밀번호 확인, 총 4칸을 작성
9)각 label의 이름을 변경해주고, input의 name과 type을 각각 맡게 변경해준다
10)제출 버튼 아래에 "이미 아이디가 있으신가요?.??" 라는 문구를 클릭하면
    LoginPage로 이동하게 <Link>를 사용하여 작성한다.
    <Link style={{color: "gray", textDecoration: "none"}} to="login">이미 아이디가 있으신가요?.??</Link>
11)label의 margin을 보기좋게 10px, 15px로 수정!! 

3.react-hook-form을 이용한 회원가입 유효성체크
-npm install react-hook-form --save로 다운
-react-hook-form 사용법 숙지
 >watch를 이용해서 input의 입력을 계쏙 지켜봄
 1)import { useForm } from 'react-hook-form';
 2)const { register, watch, errors } = useForm();
    console.log(watch("email"));
 3)input 안에 ref={register({ required: true, maxLength: 10 })} 삽입
 4)input 밖에 {errors.exampleRequired && <p>This field is required</p>} 삽입
   --> 3)에 유효성 체크를 벗어날시 <p>태그의 에러문구를 배출
-사용하는 이유 - 깔끔하고, 퍼포먼스도 좋기떄문
-각 필드에 맞게 유효성 체크 넣어주기
 >이메일에 맞는 정규식 : pattern : /^\S+@\S+$/i
 >유효성 검사 개수에 따라 errors도 각각 맡게 작성
 ***passwordconfirm은 조금 복잡함
    >코드에 주석으로 작성

4.useRef를 이용한 현재 password 값 찾기
-코드에 주석으로 작성

5.firebase에서 이메일로 유저 생성시 생기는 문제점
-원래는 클라이언트에서 이름,이메일등 정보들을 백에 던지고 
 db에 저장함으로써 유저생성 -->하지만 firebase에선 인증부분까지 다 처리해줌
-이메일, 패스워드만 전달해주면 됨!! 
 1)제출 버튼을 눌렀을때 이벤트 함수처리
   >import firebase from '../..//firebase';
   >const onSubmit = async() =>{
	let createdUser =await firebase.auth().createUserWithEmailAndPassword()
     }
   >이하 생략 코드에 작성

6.firebase에서 이메일로 유저 생성
-이메일로 유저 생성할수 있게 설정
 firebase 홈페이지 -> Authentlcation -> sign-in method -> email/password 클릭
 ->enable -> save
-http://localhost:3000/register 에서 회원가입후 제출버튼 누르면 회원가입 완료
 -> firebase에도 제대로 되어있는지 확인( Authentication -> users )

7.프로세스 처리 중 Button을 누르지 못하게 막기
-submit 버튼을 눌렀을떄 firebase에서 유저 생성처리중에는 버튼이 클릭안되게!!!
 1)loading state 생성
   ->RegisterPage.js에 const [loading, setloading] = useState(false) 작성
 2)loading state 컨트롤
   ->try catch문에 try구문 첫줄에 setLoading(true), 마지막줄에 setLoading(false) 작성
   ->try catch문에 catch구문dp setloading(false) 작성
 3)loading button UI
   ->전송 버튼에 disabled={loading} 추가  
     <input type="submit" disabled={loading}></input>

8.Firebase에 생성한 유저에 상세 정보 추가하기
-email, password 외에 이름, 사진, 휴대폰번호 등을 업데이트!!
 1)이메일과 비밀번호로 유저생성한 부분 아래에 아래와 같이 추가정보입력 코드 작성
     await createdUser.user.updatePRofile({
            displayName: data.name,
            photoURL: `http:gravatar.com/avatar/`    
      })
 2) 1)을 작성할때 MD5를 작성해야하는데 MD5란
    >유니크한 값을 가지기위해서 사용되는 모듈 
      ->형식 
        var md5 = require('md5');
        console.log(md5('message')); -------->유니크한 값이 출력
 3) md5를 사용하기 위해서 md5모듈  설치
    npm install md5 --save
 4) import md5 from 'md5';
 5) 1)에 이어 md5 작성
     await createdUser.user.updateProfile({
          displayName: data.name,
          photoURL: `http:gravatar.com/avatar/${md5(createdUser.user.email)}?d=identicon`   
     })
 6) 다시 회원가입 후 확인

9.Firebase에 생성한 유저 데이터 베이스에 저장
-인증서비스 부분에서만 생성이된거고 데이터베이스에는 x
-데이터베이스 생성
  realtime Database -> 미국 -> testmode -> 생성완료
-데이터베이스 구조
  Database -------가장 상단
  Table----------- 콜렉션이라고도 부름
  row-------------테이블의 row
  column---------컬럼
-DB저장하는법
 >MYSQL
   INSERT INTO USERS (email, displayName, photoURL)
   VALUES (sanghoon@naver.com, sanghoon, gravatar....) 
 >MongoDB
   UserModel.create({email: "sanghoon@naver.com",
                           name: "sanghoon",
                           photoURL: "gravata"})
 >Firebase
   firebase.database().ref("users").child(userid).set({	//ref: Reference 약자로 경로를 넣어주면됨
		 name: displayName,
                         image: photoURL })
-실제로 작성
 1) Firebase 데이터베이스에 저장해주기
    await firebase.database().ref("users").child(createUser.user.uid).set({	//ref: Reference 약자로 경로를 넣어주면됨
		 name: createdUser.user.displayName,
                         image: createdUser.user.photoURL })
 2) 새로 회원가입하고 firebase realtime database 확인

10.로그인 페이지 만들기
-RegisterPage.js 와 비슷하기때문에 복사하여 가져온후
  불필요한부분(다른부분)을 지우는식으로 진행
  >md5 제거 
  >useRef 제거
  >watch 제거
  >try구문의 setLoading(true), setLoading(false)뺴고 제거
  >Password Confirm, Name 부분 제거
  >register 제목부분 Login으로 수정
  >Link 부분 to="register" 로 수정, 텍스트도 아직 아이디가 없으신가요?.?? 로 수정
-try구문 작성
  try {                              
            setloading(true)
            await firebase.auth().signInWithEmailAndPassword(data.email, data.password);
            setloading(false)
        } 
-로그인 해보고 에러뜨는지 확인 
  -> 에러는 안뜨지만 로그인된후 페이지이동 x

11.인증된 이후의 페이지 이동 & useHistory
-

12.Redux 스토에 로그인 유저 정보 저장
-





